rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /recipes/{recipeId} {
      // Allow reading all recipes
      allow read: if true;
      // Only allow writing if authenticated and user owns the recipe
      allow write: if request.auth != null && request.resource.data.creatorId == request.auth.uid;
      
      // Validate required fields on create
      allow create: if request.auth != null 
        && request.resource.data.keys().hasAll([
          'title', 'description', 'difficulty', 'cookingMethods', 
          'cuisine', 'dishTypes', 'images', 'ingredients', 
          'steps', 'totalTime', 'servings', 'creatorId', 
          'createdAt', 'status', 'dietaryInfo', 'categories',
          'equipment', 'tags', 'season', 'occasion', 'estimatedCost'
        ]);
    }
    
    match /users/{userId} {
      allow read: if true;
      // Only allow superadmin or the user themselves to modify user data
      allow write: if request.auth != null && 
        (request.auth.uid == userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin');
    }

    match /conversations/{conversationId} {
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    match /invites/{inviteId} {
      // Allow reading invites
      allow read: if true;
      
      // Allow creating invites for authenticated users
      allow create: if request.auth != null && 
        request.resource.data.keys().hasAll([
          'email', 'role', 'status', 'createdAt', 'createdBy', 
          'signupUrl', 'expiresAt', 'marketingContent'
        ]) &&
        // Verify the createdBy field matches the authenticated user
        request.resource.data.createdBy == request.auth.uid;
      
      // Allow updating own invites
      allow update: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
      
      // Allow deleting own invites
      allow delete: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
    }
  }
}
