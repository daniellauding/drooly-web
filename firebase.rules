rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /recipes/{recipeId} {
      // Allow reading public recipes even if not verified
      allow read: if resource.data.status == 'published';
      
      // Only allow writing if authenticated and verified
      allow write: if request.auth != null && 
                  request.auth.token.email_verified;
    }
    
    match /users/{userId} {
      // Allow reading own user data even if not verified
      allow read: if request.auth != null &&
                 (request.auth.uid == userId || 
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin');
                  
      // Allow updating if user is owner or superadmin
      allow update: if request.auth != null && 
                   (request.auth.uid == userId ||
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin');
    }

    match /notifications/{notificationId} {
      // Allow reading own notifications even if not verified
      allow read: if request.auth != null && 
                 resource.data.userId == request.auth.uid;
    }

    match /messages/{messageId} {
      // Allow reading own messages even if not verified  
      allow read: if request.auth != null &&
                 (resource.data.senderId == request.auth.uid ||
                  resource.data.recipientId == request.auth.uid);
    }

    match /conversations/{conversationId} {
      allow read: if request.auth != null && 
                 request.auth.token.email_verified &&
                 request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
                   request.auth.token.email_verified;
      allow update: if request.auth != null && 
                   request.auth.token.email_verified &&
                   request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read: if request.auth != null && 
                   request.auth.token.email_verified &&
                   request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow write: if request.auth != null && 
                    request.auth.token.email_verified &&
                    request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    match /invites/{inviteId} {
      // Allow reading invites if authenticated
      allow read: if request.auth != null;
      
      // Allow creating invites if user is superadmin
      allow create: if request.auth != null && 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      
      // Allow updating own invites
      allow update: if request.auth != null && 
                   resource.data.createdBy == request.auth.uid;
      
      // Allow deleting own invites
      allow delete: if request.auth != null && 
                   resource.data.createdBy == request.auth.uid;
    }
  }
}
