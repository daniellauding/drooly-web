rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    match /events/{eventId} {
      allow read: if !resource.data.isHidden || 
                 (isAuthenticated() && (
                   resource.data.createdBy == request.auth.uid ||
                   resource.data.guests.hasAny([request.auth.uid])
                 ));
      allow create: if isAuthenticated() && 
                   request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                           resource.data.createdBy == request.auth.uid;
    }

    match /recipes/{recipeId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                   request.resource.data.creatorId == request.auth.uid;
      allow update: if isAuthenticated() && 
                   (resource.data.creatorId == request.auth.uid ||
                    request.resource.data.diff().affectedKeys().hasOnly(['stats']));
      allow delete: if isAuthenticated() && 
                   resource.data.creatorId == request.auth.uid;
    }

    match /feedback/{feedbackId} {
      allow create: if request.resource.data.email is string &&
                   request.resource.data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
                   request.resource.data.subject is string &&
                   request.resource.data.message is string &&
                   request.resource.data.keys().hasOnly(['email', 'subject', 'message']);
      allow read: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /users/{userId} {
      allow read: if isAuthenticated() &&
                 (request.auth.uid == userId || 
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin');
      allow update: if isAuthenticated() && 
                   request.auth.uid == userId;
                   
      match /shoppingLists/{listId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
      
      match /shoppingHistory/{historyId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
      
      match /todos/{todoId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }

      match /cookedRecipes/{recipeId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    match /sharedLists/{listId} {
      allow read: if isAuthenticated() && (
        resource.data.owner == request.auth.uid || 
        resource.data.sharedWith == request.auth.uid
      );
      allow write: if isAuthenticated() && (
        !resource.data.exists() || 
        resource.data.owner == request.auth.uid || 
        resource.data.sharedWith == request.auth.uid
      );
    }

    match /weeklyPlans/{planId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
  }
}