rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /recipes/{recipeId} {
      // Allow reading all recipes
      allow read: if true;
      
      // Only allow writing if authenticated and verified
      allow write: if request.auth != null && 
                  request.auth.token.email_verified;
      
      // Validate required fields on create
      allow create: if request.auth != null && 
                   request.auth.token.email_verified &&
        request.resource.data.keys().hasAll([
          'title', 'description', 'difficulty', 'cookingMethods', 
          'cuisine', 'dishTypes', 'images', 'ingredients', 
          'steps', 'totalTime', 'servings', 'creatorId', 
          'createdAt', 'status', 'dietaryInfo', 'categories',
          'equipment', 'tags', 'season', 'occasion', 'estimatedCost'
        ]);
    }
    
    match /users/{userId} {
      // Allow reading own user data or if superadmin
      allow read: if request.auth != null &&
                 (request.auth.uid == userId || 
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin');
                  
      // Allow users to update their own profile data
      allow update: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['name', 'username', 'birthday', 'phone', 'bio', 
                             'gender', 'isPrivate', 'avatarUrl']);
                             
      // Only allow superadmin to modify other user data
      allow write: if request.auth != null && 
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    match /conversations/{conversationId} {
      allow read: if request.auth != null && 
                 request.auth.token.email_verified &&
                 request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
                   request.auth.token.email_verified;
      allow update: if request.auth != null && 
                   request.auth.token.email_verified &&
                   request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read: if request.auth != null && 
                   request.auth.token.email_verified &&
                   request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow write: if request.auth != null && 
                    request.auth.token.email_verified &&
                    request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    match /invites/{inviteId} {
      // Allow reading invites if authenticated
      allow read: if request.auth != null;
      
      // Allow creating invites if user is superadmin
      allow create: if request.auth != null && 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      
      // Allow updating own invites
      allow update: if request.auth != null && 
                   resource.data.createdBy == request.auth.uid;
      
      // Allow deleting own invites
      allow delete: if request.auth != null && 
                   resource.data.createdBy == request.auth.uid;
    }
  }
}
